/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Assistant } from "./Assistant";
import { AssistantCountArgs } from "./AssistantCountArgs";
import { AssistantFindManyArgs } from "./AssistantFindManyArgs";
import { AssistantFindUniqueArgs } from "./AssistantFindUniqueArgs";
import { CreateAssistantArgs } from "./CreateAssistantArgs";
import { UpdateAssistantArgs } from "./UpdateAssistantArgs";
import { DeleteAssistantArgs } from "./DeleteAssistantArgs";
import { AssistantService } from "../assistant.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Assistant)
export class AssistantResolverBase {
  constructor(
    protected readonly service: AssistantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Assistant",
    action: "read",
    possession: "any",
  })
  async _assistantsMeta(
    @graphql.Args() args: AssistantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Assistant])
  @nestAccessControl.UseRoles({
    resource: "Assistant",
    action: "read",
    possession: "any",
  })
  async assistants(
    @graphql.Args() args: AssistantFindManyArgs
  ): Promise<Assistant[]> {
    return this.service.assistants(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Assistant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Assistant",
    action: "read",
    possession: "own",
  })
  async assistant(
    @graphql.Args() args: AssistantFindUniqueArgs
  ): Promise<Assistant | null> {
    const result = await this.service.assistant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Assistant)
  @nestAccessControl.UseRoles({
    resource: "Assistant",
    action: "create",
    possession: "any",
  })
  async createAssistant(
    @graphql.Args() args: CreateAssistantArgs
  ): Promise<Assistant> {
    return await this.service.createAssistant({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Assistant)
  @nestAccessControl.UseRoles({
    resource: "Assistant",
    action: "update",
    possession: "any",
  })
  async updateAssistant(
    @graphql.Args() args: UpdateAssistantArgs
  ): Promise<Assistant | null> {
    try {
      return await this.service.updateAssistant({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Assistant)
  @nestAccessControl.UseRoles({
    resource: "Assistant",
    action: "delete",
    possession: "any",
  })
  async deleteAssistant(
    @graphql.Args() args: DeleteAssistantArgs
  ): Promise<Assistant | null> {
    try {
      return await this.service.deleteAssistant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
