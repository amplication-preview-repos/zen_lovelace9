/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Assistant as PrismaAssistant } from "@prisma/client";

export class AssistantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssistantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assistant.count(args);
  }

  async assistants(
    args: Prisma.AssistantFindManyArgs
  ): Promise<PrismaAssistant[]> {
    return this.prisma.assistant.findMany(args);
  }
  async assistant(
    args: Prisma.AssistantFindUniqueArgs
  ): Promise<PrismaAssistant | null> {
    return this.prisma.assistant.findUnique(args);
  }
  async createAssistant(
    args: Prisma.AssistantCreateArgs
  ): Promise<PrismaAssistant> {
    return this.prisma.assistant.create(args);
  }
  async updateAssistant(
    args: Prisma.AssistantUpdateArgs
  ): Promise<PrismaAssistant> {
    return this.prisma.assistant.update(args);
  }
  async deleteAssistant(
    args: Prisma.AssistantDeleteArgs
  ): Promise<PrismaAssistant> {
    return this.prisma.assistant.delete(args);
  }
}
