/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EBook } from "./EBook";
import { EBookCountArgs } from "./EBookCountArgs";
import { EBookFindManyArgs } from "./EBookFindManyArgs";
import { EBookFindUniqueArgs } from "./EBookFindUniqueArgs";
import { CreateEBookArgs } from "./CreateEBookArgs";
import { UpdateEBookArgs } from "./UpdateEBookArgs";
import { DeleteEBookArgs } from "./DeleteEBookArgs";
import { EBookService } from "../eBook.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EBook)
export class EBookResolverBase {
  constructor(
    protected readonly service: EBookService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EBook",
    action: "read",
    possession: "any",
  })
  async _eBooksMeta(
    @graphql.Args() args: EBookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EBook])
  @nestAccessControl.UseRoles({
    resource: "EBook",
    action: "read",
    possession: "any",
  })
  async eBooks(@graphql.Args() args: EBookFindManyArgs): Promise<EBook[]> {
    return this.service.eBooks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EBook, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EBook",
    action: "read",
    possession: "own",
  })
  async eBook(
    @graphql.Args() args: EBookFindUniqueArgs
  ): Promise<EBook | null> {
    const result = await this.service.eBook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EBook)
  @nestAccessControl.UseRoles({
    resource: "EBook",
    action: "create",
    possession: "any",
  })
  async createEBook(@graphql.Args() args: CreateEBookArgs): Promise<EBook> {
    return await this.service.createEBook({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EBook)
  @nestAccessControl.UseRoles({
    resource: "EBook",
    action: "update",
    possession: "any",
  })
  async updateEBook(
    @graphql.Args() args: UpdateEBookArgs
  ): Promise<EBook | null> {
    try {
      return await this.service.updateEBook({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EBook)
  @nestAccessControl.UseRoles({
    resource: "EBook",
    action: "delete",
    possession: "any",
  })
  async deleteEBook(
    @graphql.Args() args: DeleteEBookArgs
  ): Promise<EBook | null> {
    try {
      return await this.service.deleteEBook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
