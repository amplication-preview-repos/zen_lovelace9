/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { YouTubeVideo } from "./YouTubeVideo";
import { YouTubeVideoCountArgs } from "./YouTubeVideoCountArgs";
import { YouTubeVideoFindManyArgs } from "./YouTubeVideoFindManyArgs";
import { YouTubeVideoFindUniqueArgs } from "./YouTubeVideoFindUniqueArgs";
import { CreateYouTubeVideoArgs } from "./CreateYouTubeVideoArgs";
import { UpdateYouTubeVideoArgs } from "./UpdateYouTubeVideoArgs";
import { DeleteYouTubeVideoArgs } from "./DeleteYouTubeVideoArgs";
import { YouTubeVideoService } from "../youTubeVideo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => YouTubeVideo)
export class YouTubeVideoResolverBase {
  constructor(
    protected readonly service: YouTubeVideoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "YouTubeVideo",
    action: "read",
    possession: "any",
  })
  async _youTubeVideosMeta(
    @graphql.Args() args: YouTubeVideoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [YouTubeVideo])
  @nestAccessControl.UseRoles({
    resource: "YouTubeVideo",
    action: "read",
    possession: "any",
  })
  async youTubeVideos(
    @graphql.Args() args: YouTubeVideoFindManyArgs
  ): Promise<YouTubeVideo[]> {
    return this.service.youTubeVideos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => YouTubeVideo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "YouTubeVideo",
    action: "read",
    possession: "own",
  })
  async youTubeVideo(
    @graphql.Args() args: YouTubeVideoFindUniqueArgs
  ): Promise<YouTubeVideo | null> {
    const result = await this.service.youTubeVideo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => YouTubeVideo)
  @nestAccessControl.UseRoles({
    resource: "YouTubeVideo",
    action: "create",
    possession: "any",
  })
  async createYouTubeVideo(
    @graphql.Args() args: CreateYouTubeVideoArgs
  ): Promise<YouTubeVideo> {
    return await this.service.createYouTubeVideo({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => YouTubeVideo)
  @nestAccessControl.UseRoles({
    resource: "YouTubeVideo",
    action: "update",
    possession: "any",
  })
  async updateYouTubeVideo(
    @graphql.Args() args: UpdateYouTubeVideoArgs
  ): Promise<YouTubeVideo | null> {
    try {
      return await this.service.updateYouTubeVideo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => YouTubeVideo)
  @nestAccessControl.UseRoles({
    resource: "YouTubeVideo",
    action: "delete",
    possession: "any",
  })
  async deleteYouTubeVideo(
    @graphql.Args() args: DeleteYouTubeVideoArgs
  ): Promise<YouTubeVideo | null> {
    try {
      return await this.service.deleteYouTubeVideo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
